generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentType {
  CPF
  CNPJ
}

enum Roles {
  Admin
  User
}

enum ActivityStatus {
  Active
  Inactive
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Completed
  Canceled
}

enum PaymentMethods {
  Card
  Ticket
  Pix
  Cash
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Roles  @default(User)

  @@map("users")
}

model Supplier {
  id           String         @id @default(uuid())
  name         String
  document     String         @unique
  documentType DocumentType
  email        String         @unique
  phone        String?
  address      String?
  status       ActivityStatus @default(Active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Products     Product[]

  @@map("suppliers")
}

model Customer {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  phone        String?
  address      String?
  document     String       @unique
  documentType DocumentType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Orders       Order[]

  @@map("customers")
}

model Product {
  id             String      @id @default(uuid())
  name           String
  description    String?
  category       Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId     String
  stock          Int         @default(0)
  costPrice      Decimal
  salePrice      Decimal
  supplier       Supplier    @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  supplierId     String
  barcode        String      @unique
  expirationDate DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  OrderItems     OrderItem[]

  @@index([categoryId])
  @@map("products")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  color    String
  products Product[]

  @@map("categories")
}

model Order {
  id            String         @id @default(uuid())
  custumer      Customer       @relation(fields: [custumerId], references: [id], onDelete: Cascade)
  custumerId    String
  orderDate     DateTime       @default(now())
  totalValue    Decimal
  status        OrderStatus    @default(Pending)
  paymentMethod PaymentMethods
  deliveryDate  DateTime?
  note          String?
  OrderItems    OrderItem[]

  @@index([status])
  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product    Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId  String
  amount     Int
  salePrice  Decimal
  totalPrice Decimal @default(0)

  @@map("order_items")
}
